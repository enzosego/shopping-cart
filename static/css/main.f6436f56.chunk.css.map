{"version":3,"sources":["webpack://src/App.scss","webpack://src/_abstracts.scss","webpack://node_modules/include-media/dist/_include-media.scss"],"names":[],"mappings":"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","file":"main.f6436f56.chunk.css","sourcesContent":["* {\n  padding: 0;\n  margin: 0;\n  -webkit-box-sizing: 0;\n      -moz-box-sizing: 0;\n          box-sizing: 0;\n}\n\n@import 'node_modules/include-media/dist/include-media';\n@import 'abstracts';\n\n.App {\n  font-family: 'Poppins', Helvetica, Arial, sans-serif;\n}\n\nbody {\n  background: #EDEDED;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n@include mapping-images();\n\nheader {\n  z-index: 1;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  background: #0081A7;\n  nav {\n    background: inherit;\n    width: 90%;\n    margin: auto;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: rgb(225, 225, 225);\n  }\n  .cart-logo {\n    position: relative;\n    display: flex;\n    align-items: center;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n  .items-count {\n    position: absolute;\n    top: 5px;\n    right: 7px;\n    min-width: 14px;\n    max-height: 14px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 4px;\n    background: #0081A7;\n    font-size: .75rem;\n    font-weight: 600;\n    color: white;\n  }\n}\n\n.Homepage, .About, .Shop, .Cart {\n  margin-top: 50px;\n}\n\n.home-main {\n  width: 100%;\n  height: 70vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #2B303A;\n\n  h1 {\n    font-size: 3rem;\n    color: rgb(5, 5, 5);\n    @include media('<tablet') {\n      font-size: 1.5rem;\n    }\n    @include media('<320px') {\n      font-size: 1.3rem;\n    }\n  }\n\n  a {\n    color: rgb(180, 180, 180);\n    @include media('<tablet') {\n      font-size: .9rem;\n    }\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .arrow {\n    margin-left: 5px;\n  }\n}\n\nfooter {\n  margin-top: 50px;\n  text-align: center;\n  color: rgb(100, 100, 100);\n  @include media('<desktop') {\n    margin-top: 90px;\n  }\n  a:hover {\n    text-decoration: underline;\n  }\n}\n\n.Shop {\n  margin-top: 80px;\n  margin-bottom: 80px;\n  .tiles {\n    width: 1000px;\n    margin: auto;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    grid-column-gap: 20px;\n    grid-row-gap: 50px;\n    @include media('<desktop') {\n      width: 90%;\n      grid-template-columns: repeat(3, 1fr);\n      grid-template-rows: repeat(4, 1fr);\n    }\n    @include media('<tablet') {\n      grid-template-columns: repeat(2, 1fr);\n      grid-template-rows: repeat(6, 1fr);\n    }\n  }\n\n  .tile {\n    border-radius: 5px;\n    box-shadow: 0 4px 5px 1px grey;\n    background-color: #fff;\n    text-align: center;\n    &:hover {\n      .item-image div {\n        transform: scale(1.2);\n      }\n    }\n  }\n\n  .item-image {\n    padding-top: 5px;\n    width: 100%;\n    height: 150px;\n    overflow: hidden;\n    div {\n      transition: .7s;\n    }\n  }\n\n  .item-text {\n    margin-top: 15px;\n  }\n\n  .icon-container {\n    margin-top: 15px;\n    display: inline-block;\n    cursor: pointer;\n  }\n  .add-to-cart-icon {\n    margin-bottom: 15px;\n    font-size: 1.4rem;\n    color: #0081A7;\n    pointer-events: none;\n  }\n}\n\n.Cart {\n  width: 600px;\n  margin: auto;\n  margin-top: 80px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @include media('<tablet') {\n    width: 350px;\n  }\n  @include media('<340px') {\n    width: 300px;\n  }\n  .cart-item {\n    position: relative;\n    display: flex;\n    margin-top: 10px;\n    width: 100%;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 5px 5px 1px grey;\n  }\n  .quantity {\n    position: absolute;\n    left: 35%;\n    margin-left: 15px;\n    display: flex;\n    align-items: center;\n    p {\n      margin-left: 5px;\n      margin-right: 5px;\n    }\n    button {\n      width: 20px;\n      height: 20px;\n      background: #0081A7;\n      border: none;\n      border-radius: 2px;\n      color: white;\n      outline: none;\n      cursor: pointer;\n\n      &:active {\n        transform: scale(.96);\n      }\n    }\n  }\n  h3 {\n    margin-left: 15px;\n  }\n  h4 {\n    position: absolute;\n    left: 60%;\n  }\n  .cart-image {\n    position: absolute;\n    top: 5px;\n    right: 0;\n    height: 80%;\n    width: 50px;\n  }\n  .back-to-shop {\n    margin-bottom: 30px;\n    background: #457b9d;\n    padding: 8px;\n    border: none;\n    border-radius: 5px;\n    outline: none;\n    color: white;\n    font-size: 1.1rem;\n    font-family: inherit;\n    font-weight: 600;\n    cursor: pointer;\n    transition: .2s;\n    &:hover {\n      background: #0081A7;\n    }\n    &:active {\n      transform: scale(.98);\n    }\n  }\n}\n\n.About {\n  width: 1000px;\n  margin: auto;\n  margin-top: 80px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @include media('<desktop') {\n    width: 600px;\n  }\n  @include media('<tablet') {\n    width: 90%;\n  }\n\n  h1 {\n    font-size: 1.5rem;\n  }\n  p {\n    margin-top: 30px;\n    text-align: center;\n  }\n}\n","$image-map: (\n  sevenup: url('images/7up.png'),\n  pepsi: url('images/pepsi.png'),\n  lays: url('images/lays.png'),\n  cheetos: url('images/cheetos.png'),\n  coca: url('images/coca-cola.png'),\n  kitkat: url('images/kitkat.png'),\n  redbull: url('images/redbull.png'),\n  mnm: url('images/m&m.png'),\n  doritos: url('images/doritos.png'),\n  snickers: url('images/snickers.png'),\n  sprite: url('images/sprite.png'),\n  fanta: url('images/fanta.png'),\n);\n\n@mixin mapping-images() {\n  @each $number, $image in $image-map {\n    ##{$number} {\n      div {\n        background-image: $image;\n        background-size: contain;\n        background-position: center;\n        background-repeat: no-repeat;\n        height: 100%;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}